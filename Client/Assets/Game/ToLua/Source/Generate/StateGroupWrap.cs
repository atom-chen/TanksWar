//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class StateGroupWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(StateGroup), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction(".geti", get_Item);
		L.RegFunction("get_Item", get_Item);
		L.RegFunction("AddGlobalHook", AddGlobalHook);
		L.RegFunction("RemoveGlobalHook", RemoveGlobalHook);
		L.RegFunction("GetEnumerator", GetEnumerator);
		L.RegFunction("AddSel", AddSel);
		L.RegFunction("SetSel", SetSel);
		L.RegFunction("MoveChildTo", MoveChildTo);
		L.RegFunction("MoveChildToFirst", MoveChildToFirst);
		L.RegFunction("MoveChildToLast", MoveChildToLast);
		L.RegFunction("OnSel", OnSel);
		L.RegFunction("Get", Get);
		L.RegFunction("SetCount", SetCount);
		L.RegFunction("OnCacheTab", OnCacheTab);
		L.RegFunction("OnSelTab", OnSelTab);
		L.RegVar("this", _this, null);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("m_stateHandles", get_m_stateHandles, set_m_stateHandles);
		L.RegVar("m_itemTemplate", get_m_itemTemplate, set_m_itemTemplate);
		L.RegVar("m_autoFindOnStart", get_m_autoFindOnStart, set_m_autoFindOnStart);
		L.RegVar("m_ctrlType", get_m_ctrlType, set_m_ctrlType);
		L.RegVar("Count", get_Count, null);
		L.RegVar("CurStateHandle", get_CurStateHandle, null);
		L.RegVar("CurIdx", get_CurIdx, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _get_this(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			StateGroup obj = (StateGroup)ToLua.CheckObject(L, 1, typeof(StateGroup));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			StateHandle o = obj[arg0];
			ToLua.Push(L, o);
			return 1;

		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _this(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushvalue(L, 1);
			LuaDLL.tolua_bindthis(L, _get_this, null);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Item(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			StateGroup obj = (StateGroup)ToLua.CheckObject(L, 1, typeof(StateGroup));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			StateHandle o = obj[arg0];
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddGlobalHook(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Action<StateGroup,int> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<StateGroup,int>)ToLua.CheckObject(L, 1, typeof(System.Action<StateGroup,int>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<StateGroup,int>), func) as System.Action<StateGroup,int>;
			}

			StateGroup.AddGlobalHook(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveGlobalHook(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Action<StateGroup,int> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<StateGroup,int>)ToLua.CheckObject(L, 1, typeof(System.Action<StateGroup,int>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<StateGroup,int>), func) as System.Action<StateGroup,int>;
			}

			StateGroup.RemoveGlobalHook(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEnumerator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			StateGroup obj = (StateGroup)ToLua.CheckObject(L, 1, typeof(StateGroup));
			System.Collections.IEnumerator o = obj.GetEnumerator();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddSel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			StateGroup obj = (StateGroup)ToLua.CheckObject(L, 1, typeof(StateGroup));
			System.Action<StateHandle,int> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<StateHandle,int>)ToLua.CheckObject(L, 2, typeof(System.Action<StateHandle,int>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<StateHandle,int>), func) as System.Action<StateHandle,int>;
			}

			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.AddSel(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			StateGroup obj = (StateGroup)ToLua.CheckObject(L, 1, typeof(StateGroup));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.SetSel(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveChildTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			StateGroup obj = (StateGroup)ToLua.CheckObject(L, 1, typeof(StateGroup));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.MoveChildTo(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveChildToFirst(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			StateGroup obj = (StateGroup)ToLua.CheckObject(L, 1, typeof(StateGroup));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.MoveChildToFirst(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveChildToLast(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			StateGroup obj = (StateGroup)ToLua.CheckObject(L, 1, typeof(StateGroup));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.MoveChildToLast(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnSel(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(StateGroup), typeof(StateHandle)))
			{
				StateGroup obj = (StateGroup)ToLua.ToObject(L, 1);
				StateHandle arg0 = (StateHandle)ToLua.ToObject(L, 2);
				obj.OnSel(arg0);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(StateGroup), typeof(StateHandle), typeof(bool), typeof(bool)))
			{
				StateGroup obj = (StateGroup)ToLua.ToObject(L, 1);
				StateHandle arg0 = (StateHandle)ToLua.ToObject(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				obj.OnSel(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: StateGroup.OnSel");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Get(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			StateGroup obj = (StateGroup)ToLua.CheckObject(L, 1, typeof(StateGroup));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			StateHandle o = obj.Get(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			StateGroup obj = (StateGroup)ToLua.CheckObject(L, 1, typeof(StateGroup));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SetCount(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnCacheTab(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			StateGroup obj = (StateGroup)ToLua.CheckObject(L, 1, typeof(StateGroup));
			obj.OnCacheTab();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnSelTab(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			StateGroup obj = (StateGroup)ToLua.CheckObject(L, 1, typeof(StateGroup));
			StateHandle arg0 = (StateHandle)ToLua.CheckUnityObject(L, 2, typeof(StateHandle));
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
			bool o = obj.OnSelTab(arg0, arg1, arg2);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_stateHandles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			StateGroup obj = (StateGroup)o;
			System.Collections.Generic.List<StateHandle> ret = obj.m_stateHandles;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_stateHandles on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_itemTemplate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			StateGroup obj = (StateGroup)o;
			StateHandle ret = obj.m_itemTemplate;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_itemTemplate on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_autoFindOnStart(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			StateGroup obj = (StateGroup)o;
			bool ret = obj.m_autoFindOnStart;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_autoFindOnStart on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_ctrlType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			StateGroup obj = (StateGroup)o;
			StateGroup.CtrlType ret = obj.m_ctrlType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_ctrlType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Count(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			StateGroup obj = (StateGroup)o;
			int ret = obj.Count;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Count on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurStateHandle(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			StateGroup obj = (StateGroup)o;
			StateHandle ret = obj.CurStateHandle;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CurStateHandle on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurIdx(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			StateGroup obj = (StateGroup)o;
			int ret = obj.CurIdx;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CurIdx on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_stateHandles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			StateGroup obj = (StateGroup)o;
			System.Collections.Generic.List<StateHandle> arg0 = (System.Collections.Generic.List<StateHandle>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<StateHandle>));
			obj.m_stateHandles = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_stateHandles on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_itemTemplate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			StateGroup obj = (StateGroup)o;
			StateHandle arg0 = (StateHandle)ToLua.CheckUnityObject(L, 2, typeof(StateHandle));
			obj.m_itemTemplate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_itemTemplate on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_autoFindOnStart(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			StateGroup obj = (StateGroup)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.m_autoFindOnStart = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_autoFindOnStart on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_ctrlType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			StateGroup obj = (StateGroup)o;
			StateGroup.CtrlType arg0 = (StateGroup.CtrlType)ToLua.CheckObject(L, 2, typeof(StateGroup.CtrlType));
			obj.m_ctrlType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_ctrlType on a nil value" : e.Message);
		}
	}
}

