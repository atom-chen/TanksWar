//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class HandleGreyWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(HandleGrey), typeof(IHandle));
		L.RegFunction("OnReset", OnReset);
		L.RegFunction("OnEnd", OnEnd);
		L.RegFunction("New", _CreateHandleGrey);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateHandleGrey(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				HandleGrey obj = new HandleGrey();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: HandleGrey.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnReset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			HandleGrey obj = (HandleGrey)ToLua.CheckObject(L, 1, typeof(HandleGrey));
			Handle arg0 = (Handle)ToLua.CheckObject(L, 2, typeof(Handle));
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
			obj.OnReset(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnEnd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			HandleGrey obj = (HandleGrey)ToLua.CheckObject(L, 1, typeof(HandleGrey));
			Handle arg0 = (Handle)ToLua.CheckObject(L, 2, typeof(Handle));
			obj.OnEnd(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

