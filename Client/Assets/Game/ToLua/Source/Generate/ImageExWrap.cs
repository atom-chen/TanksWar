//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ImageExWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ImageEx), typeof(UnityEngine.UI.Image));
		L.RegFunction("Set", Set);
		L.RegFunction("SetImageURL", SetImageURL);
		L.RegFunction("SetGrey", SetGrey);
		L.RegFunction("SetAllDirty", SetAllDirty);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("m_grey", get_m_grey, set_m_grey);
		L.RegVar("GreyMaterial", get_GreyMaterial, null);
		L.RegVar("Transparent", get_Transparent, null);
		L.RegVar("IsGrey", get_IsGrey, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Set(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ImageEx obj = (ImageEx)ToLua.CheckObject(L, 1, typeof(ImageEx));
			string arg0 = ToLua.CheckString(L, 2);
			obj.Set(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetImageURL(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ImageEx obj = (ImageEx)ToLua.CheckObject(L, 1, typeof(ImageEx));
			string arg0 = ToLua.CheckString(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.SetImageURL(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetGrey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ImageEx obj = (ImageEx)ToLua.CheckObject(L, 1, typeof(ImageEx));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SetGrey(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAllDirty(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ImageEx obj = (ImageEx)ToLua.CheckObject(L, 1, typeof(ImageEx));
			obj.SetAllDirty();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_grey(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageEx obj = (ImageEx)o;
			bool ret = obj.m_grey;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_grey on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GreyMaterial(IntPtr L)
	{
		try
		{
			ToLua.Push(L, ImageEx.GreyMaterial);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Transparent(IntPtr L)
	{
		try
		{
			ToLua.Push(L, ImageEx.Transparent);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsGrey(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageEx obj = (ImageEx)o;
			bool ret = obj.IsGrey;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsGrey on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_grey(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			ImageEx obj = (ImageEx)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.m_grey = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_grey on a nil value" : e.Message);
		}
	}
}

