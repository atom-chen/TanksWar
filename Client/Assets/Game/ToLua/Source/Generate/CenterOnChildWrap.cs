//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class CenterOnChildWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(CenterOnChild), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("OnEndDrag", OnEndDrag);
		L.RegFunction("OnDrag", OnDrag);
		L.RegFunction("GetCenterChildIndex", GetCenterChildIndex);
		L.RegFunction("RefreshState", RefreshState);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("centerSpeed", get_centerSpeed, set_centerSpeed);
		L.RegVar("onCenter", get_onCenter, set_onCenter);
		L.RegFunction("OnCenterHandler", CenterOnChild_OnCenterHandler);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnEndDrag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CenterOnChild obj = (CenterOnChild)ToLua.CheckObject(L, 1, typeof(CenterOnChild));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnEndDrag(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnDrag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			CenterOnChild obj = (CenterOnChild)ToLua.CheckObject(L, 1, typeof(CenterOnChild));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnDrag(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCenterChildIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CenterOnChild obj = (CenterOnChild)ToLua.CheckObject(L, 1, typeof(CenterOnChild));
			int o = obj.GetCenterChildIndex();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RefreshState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			CenterOnChild obj = (CenterOnChild)ToLua.CheckObject(L, 1, typeof(CenterOnChild));
			obj.RefreshState();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_centerSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CenterOnChild obj = (CenterOnChild)o;
			float ret = obj.centerSpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index centerSpeed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onCenter(IntPtr L)
	{
		ToLua.Push(L, new EventObject("CenterOnChild.onCenter"));
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_centerSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			CenterOnChild obj = (CenterOnChild)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.centerSpeed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index centerSpeed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_onCenter(IntPtr L)
	{
		try
		{
			CenterOnChild obj = (CenterOnChild)ToLua.CheckObject(L, 1, typeof(CenterOnChild));
			EventObject arg0 = null;

			if (LuaDLL.lua_isuserdata(L, 2) != 0)
			{
				arg0 = (EventObject)ToLua.ToObject(L, 2);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "The event 'CenterOnChild.onCenter' can only appear on the left hand side of += or -= when used outside of the type 'CenterOnChild'");
			}

			if (arg0.op == EventOp.Add)
			{
				CenterOnChild.OnCenterHandler ev = (CenterOnChild.OnCenterHandler)DelegateFactory.CreateDelegate(typeof(CenterOnChild.OnCenterHandler), arg0.func);
				obj.onCenter += ev;
			}
			else if (arg0.op == EventOp.Sub)
			{
				CenterOnChild.OnCenterHandler ev = (CenterOnChild.OnCenterHandler)LuaMisc.GetEventHandler(obj, typeof(CenterOnChild), "onCenter");
				Delegate[] ds = ev.GetInvocationList();
				LuaState state = LuaState.Get(L);

				for (int i = 0; i < ds.Length; i++)
				{
					ev = (CenterOnChild.OnCenterHandler)ds[i];
					LuaDelegate ld = ev.Target as LuaDelegate;

					if (ld != null && ld.func == arg0.func)
					{
						obj.onCenter -= ev;
						state.DelayDispose(ld.func);
						break;
					}
				}

				arg0.func.Dispose();
			}

			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CenterOnChild_OnCenterHandler(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CenterOnChild.OnCenterHandler), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(CenterOnChild.OnCenterHandler), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

