//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UI_SequenceHandleWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UI.SequenceHandle), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("ResetId", ResetId);
		L.RegFunction("SyncHandle", SyncHandle);
		L.RegFunction("AddSubHandle", AddSubHandle);
		L.RegFunction("Sort", Sort);
		L.RegFunction("RemoveSubHandle", RemoveSubHandle);
		L.RegFunction("OffsetTime", OffsetTime);
		L.RegFunction("ChangeTime", ChangeTime);
		L.RegFunction("GetByTime", GetByTime);
		L.RegFunction("GetAllByTime", GetAllByTime);
		L.RegFunction("GetClosest", GetClosest);
		L.RegFunction("GetRange", GetRange);
		L.RegFunction("ToggleExpand", ToggleExpand);
		L.RegFunction("SetDurationInvalid", SetDurationInvalid);
		L.RegFunction("GetSubHandle", GetSubHandle);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("m_handles", get_m_handles, set_m_handles);
		L.RegVar("MaxCount", get_MaxCount, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UI.SequenceHandle obj = (UI.SequenceHandle)ToLua.CheckObject(L, 1, typeof(UI.SequenceHandle));
			obj.ResetId();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SyncHandle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UI.SequenceHandle obj = (UI.SequenceHandle)ToLua.CheckObject(L, 1, typeof(UI.SequenceHandle));
			UnityEngine.Component arg0 = (UnityEngine.Component)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Component));
			UI.Handle arg1 = (UI.Handle)ToLua.CheckObject(L, 3, typeof(UI.Handle));
			obj.SyncHandle(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddSubHandle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			UI.SequenceHandle obj = (UI.SequenceHandle)ToLua.CheckObject(L, 1, typeof(UI.SequenceHandle));
			UnityEngine.Component arg0 = (UnityEngine.Component)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Component));
			UI.Handle arg1 = (UI.Handle)ToLua.CheckObject(L, 3, typeof(UI.Handle));
			UI.Handle.Type arg2 = (UI.Handle.Type)ToLua.CheckObject(L, 4, typeof(UI.Handle.Type));
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
			obj.AddSubHandle(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Sort(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UI.SequenceHandle obj = (UI.SequenceHandle)ToLua.CheckObject(L, 1, typeof(UI.SequenceHandle));
			UnityEngine.Component arg0 = (UnityEngine.Component)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Component));
			UI.Handle arg1 = (UI.Handle)ToLua.CheckObject(L, 3, typeof(UI.Handle));
			obj.Sort(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveSubHandle(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UI.SequenceHandle), typeof(UnityEngine.Component), typeof(UI.Handle), typeof(float)))
			{
				UI.SequenceHandle obj = (UI.SequenceHandle)ToLua.ToObject(L, 1);
				UnityEngine.Component arg0 = (UnityEngine.Component)ToLua.ToObject(L, 2);
				UI.Handle arg1 = (UI.Handle)ToLua.ToObject(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				obj.RemoveSubHandle(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UI.SequenceHandle), typeof(UnityEngine.Component), typeof(UI.Handle), typeof(UI.Handle)))
			{
				UI.SequenceHandle obj = (UI.SequenceHandle)ToLua.ToObject(L, 1);
				UnityEngine.Component arg0 = (UnityEngine.Component)ToLua.ToObject(L, 2);
				UI.Handle arg1 = (UI.Handle)ToLua.ToObject(L, 3);
				UI.Handle arg2 = (UI.Handle)ToLua.ToObject(L, 4);
				obj.RemoveSubHandle(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UI.SequenceHandle.RemoveSubHandle");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OffsetTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			UI.SequenceHandle obj = (UI.SequenceHandle)ToLua.CheckObject(L, 1, typeof(UI.SequenceHandle));
			UnityEngine.Component arg0 = (UnityEngine.Component)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Component));
			UI.Handle arg1 = (UI.Handle)ToLua.CheckObject(L, 3, typeof(UI.Handle));
			System.Collections.Generic.List<UI.Handle> arg2 = (System.Collections.Generic.List<UI.Handle>)ToLua.CheckObject(L, 4, typeof(System.Collections.Generic.List<UI.Handle>));
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
			obj.OffsetTime(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ChangeTime(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(UI.SequenceHandle), typeof(UnityEngine.Component), typeof(UI.Handle), typeof(float), typeof(float)))
			{
				UI.SequenceHandle obj = (UI.SequenceHandle)ToLua.ToObject(L, 1);
				UnityEngine.Component arg0 = (UnityEngine.Component)ToLua.ToObject(L, 2);
				UI.Handle arg1 = (UI.Handle)ToLua.ToObject(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
				obj.ChangeTime(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(UI.SequenceHandle), typeof(UnityEngine.Component), typeof(UI.Handle), typeof(UI.Handle), typeof(float)))
			{
				UI.SequenceHandle obj = (UI.SequenceHandle)ToLua.ToObject(L, 1);
				UnityEngine.Component arg0 = (UnityEngine.Component)ToLua.ToObject(L, 2);
				UI.Handle arg1 = (UI.Handle)ToLua.ToObject(L, 3);
				UI.Handle arg2 = (UI.Handle)ToLua.ToObject(L, 4);
				float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
				obj.ChangeTime(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UI.SequenceHandle.ChangeTime");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetByTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UI.SequenceHandle obj = (UI.SequenceHandle)ToLua.CheckObject(L, 1, typeof(UI.SequenceHandle));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			UI.Handle o = obj.GetByTime(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAllByTime(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UI.SequenceHandle obj = (UI.SequenceHandle)ToLua.CheckObject(L, 1, typeof(UI.SequenceHandle));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			System.Collections.Generic.List<UI.Handle> o = obj.GetAllByTime(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetClosest(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UI.SequenceHandle obj = (UI.SequenceHandle)ToLua.CheckObject(L, 1, typeof(UI.SequenceHandle));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			UI.Handle o = obj.GetClosest(arg0, arg1, arg2);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRange(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UI.SequenceHandle obj = (UI.SequenceHandle)ToLua.CheckObject(L, 1, typeof(UI.SequenceHandle));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			System.Collections.Generic.List<UI.Handle> o = obj.GetRange(arg0, arg1);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToggleExpand(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UI.SequenceHandle obj = (UI.SequenceHandle)ToLua.CheckObject(L, 1, typeof(UI.SequenceHandle));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.ToggleExpand(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDurationInvalid(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UI.SequenceHandle obj = (UI.SequenceHandle)ToLua.CheckObject(L, 1, typeof(UI.SequenceHandle));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.SetDurationInvalid(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSubHandle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UI.SequenceHandle obj = (UI.SequenceHandle)ToLua.CheckObject(L, 1, typeof(UI.SequenceHandle));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UI.Handle o = obj.GetSubHandle(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_handles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UI.SequenceHandle obj = (UI.SequenceHandle)o;
			System.Collections.Generic.List<UI.Handle> ret = obj.m_handles;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_handles on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UI.SequenceHandle obj = (UI.SequenceHandle)o;
			int ret = obj.MaxCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MaxCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_handles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UI.SequenceHandle obj = (UI.SequenceHandle)o;
			System.Collections.Generic.List<UI.Handle> arg0 = (System.Collections.Generic.List<UI.Handle>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UI.Handle>));
			obj.m_handles = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_handles on a nil value" : e.Message);
		}
	}
}

