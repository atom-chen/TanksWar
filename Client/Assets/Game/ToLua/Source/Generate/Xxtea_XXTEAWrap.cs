//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Xxtea_XXTEAWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Xxtea.XXTEA), typeof(System.Object));
		L.RegFunction("Encrypt", Encrypt);
		L.RegFunction("EncryptToBase64String", EncryptToBase64String);
		L.RegFunction("Decrypt", Decrypt);
		L.RegFunction("DecryptBase64String", DecryptBase64String);
		L.RegFunction("DecryptToString", DecryptToString);
		L.RegFunction("DecryptBase64StringToString", DecryptBase64StringToString);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Encrypt(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(byte[]), typeof(string)))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				byte[] o = Xxtea.XXTEA.Encrypt(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				byte[] o = Xxtea.XXTEA.Encrypt(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(byte[]), typeof(byte[])))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				byte[] o = Xxtea.XXTEA.Encrypt(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(byte[])))
			{
				string arg0 = ToLua.ToString(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				byte[] o = Xxtea.XXTEA.Encrypt(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Xxtea.XXTEA.Encrypt");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EncryptToBase64String(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(byte[]), typeof(string)))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				string o = Xxtea.XXTEA.EncryptToBase64String(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				string o = Xxtea.XXTEA.EncryptToBase64String(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(byte[]), typeof(byte[])))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				string o = Xxtea.XXTEA.EncryptToBase64String(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(byte[])))
			{
				string arg0 = ToLua.ToString(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				string o = Xxtea.XXTEA.EncryptToBase64String(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Xxtea.XXTEA.EncryptToBase64String");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Decrypt(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(byte[]), typeof(string)))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				byte[] o = Xxtea.XXTEA.Decrypt(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(byte[]), typeof(byte[])))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				byte[] o = Xxtea.XXTEA.Decrypt(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Xxtea.XXTEA.Decrypt");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DecryptBase64String(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				byte[] o = Xxtea.XXTEA.DecryptBase64String(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(byte[])))
			{
				string arg0 = ToLua.ToString(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				byte[] o = Xxtea.XXTEA.DecryptBase64String(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Xxtea.XXTEA.DecryptBase64String");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DecryptToString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(byte[]), typeof(string)))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				string o = Xxtea.XXTEA.DecryptToString(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(byte[]), typeof(byte[])))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				string o = Xxtea.XXTEA.DecryptToString(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Xxtea.XXTEA.DecryptToString");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DecryptBase64StringToString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				string o = Xxtea.XXTEA.DecryptBase64StringToString(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(byte[])))
			{
				string arg0 = ToLua.ToString(L, 1);
				byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
				string o = Xxtea.XXTEA.DecryptBase64StringToString(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Xxtea.XXTEA.DecryptBase64StringToString");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

