//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UI_StateHandleWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UI.StateHandle), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("DoAllHandle", DoAllHandle);
		L.RegFunction("CanMoveState", CanMoveState);
		L.RegFunction("MoveState", MoveState);
		L.RegFunction("AddState", AddState);
		L.RegFunction("RemoveState", RemoveState);
		L.RegFunction("AddPublicHandle", AddPublicHandle);
		L.RegFunction("RemovePublicHandle", RemovePublicHandle);
		L.RegFunction("AddPrivateHandle", AddPrivateHandle);
		L.RegFunction("RemovePrivateHandle", RemovePrivateHandle);
		L.RegFunction("LateUpdate", LateUpdate);
		L.RegFunction("SetState", SetState);
		L.RegFunction("GetState", GetState);
		L.RegFunction("AddGlobalHook", AddGlobalHook);
		L.RegFunction("RemoveGlobalHook", RemoveGlobalHook);
		L.RegFunction("AddClick", AddClick);
		L.RegFunction("AddLuaClick", AddLuaClick);
		L.RegFunction("AddClickEx", AddClickEx);
		L.RegFunction("AddLuaClickEx", AddLuaClickEx);
		L.RegFunction("AddPressHold", AddPressHold);
		L.RegFunction("AddChangeState", AddChangeState);
		L.RegFunction("AddPointUp", AddPointUp);
		L.RegFunction("AddPointDown", AddPointDown);
		L.RegFunction("AddDragBegin", AddDragBegin);
		L.RegFunction("AddDrag", AddDrag);
		L.RegFunction("AddDragEnd", AddDragEnd);
		L.RegFunction("OnPointerClick", OnPointerClick);
		L.RegFunction("OnPointerDown", OnPointerDown);
		L.RegFunction("OnPointerUp", OnPointerUp);
		L.RegFunction("ExecuteClick", ExecuteClick);
		L.RegFunction("ExecuteDown", ExecuteDown);
		L.RegFunction("ExecuteUp", ExecuteUp);
		L.RegFunction("ExecuteHold", ExecuteHold);
		L.RegFunction("ExecuteBeginDrag", ExecuteBeginDrag);
		L.RegFunction("ExecuteDrag", ExecuteDrag);
		L.RegFunction("ExecuteEndDrag", ExecuteEndDrag);
		L.RegFunction("Clear", Clear);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("m_states", get_m_states, set_m_states);
		L.RegVar("m_curState", get_m_curState, set_m_curState);
		L.RegVar("m_pressHoldTime", get_m_pressHoldTime, set_m_pressHoldTime);
		L.RegVar("m_ctrlType", get_m_ctrlType, set_m_ctrlType);
		L.RegVar("Duration", get_Duration, set_Duration);
		L.RegVar("IsRealTime", get_IsRealTime, set_IsRealTime);
		L.RegVar("CurState", get_CurState, null);
		L.RegVar("CurStateIdx", get_CurStateIdx, null);
		L.RegVar("StateName", get_StateName, null);
		L.RegVar("EnableCtrlState", get_EnableCtrlState, set_EnableCtrlState);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DoAllHandle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			System.Action<UI.Handle> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<UI.Handle>)ToLua.CheckObject(L, 3, typeof(System.Action<UI.Handle>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<UI.Handle>), func) as System.Action<UI.Handle>;
			}

			obj.DoAllHandle(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CanMoveState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			bool o = obj.CanMoveState(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.MoveState(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			obj.AddState();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.RemoveState(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddPublicHandle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			UI.Handle.Type arg0 = (UI.Handle.Type)ToLua.CheckObject(L, 2, typeof(UI.Handle.Type));
			obj.AddPublicHandle(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemovePublicHandle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.RemovePublicHandle(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddPrivateHandle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UI.Handle.Type arg1 = (UI.Handle.Type)ToLua.CheckObject(L, 3, typeof(UI.Handle.Type));
			obj.AddPrivateHandle(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemovePrivateHandle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.RemovePrivateHandle(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LateUpdate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			obj.LateUpdate();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
			obj.SetState(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UI.StateHandle.State o = obj.GetState(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddGlobalHook(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			System.Action<UI.StateHandle> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UI.StateHandle>)ToLua.CheckObject(L, 1, typeof(System.Action<UI.StateHandle>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UI.StateHandle>), func) as System.Action<UI.StateHandle>;
			}

			System.Action<UI.StateHandle> arg1 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<UI.StateHandle>)ToLua.CheckObject(L, 2, typeof(System.Action<UI.StateHandle>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<UI.StateHandle>), func) as System.Action<UI.StateHandle>;
			}

			System.Action<UnityEngine.EventSystems.PointerEventData> arg2 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (System.Action<UnityEngine.EventSystems.PointerEventData>)ToLua.CheckObject(L, 3, typeof(System.Action<UnityEngine.EventSystems.PointerEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg2 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.EventSystems.PointerEventData>), func) as System.Action<UnityEngine.EventSystems.PointerEventData>;
			}

			System.Action<UnityEngine.EventSystems.PointerEventData> arg3 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg3 = (System.Action<UnityEngine.EventSystems.PointerEventData>)ToLua.CheckObject(L, 4, typeof(System.Action<UnityEngine.EventSystems.PointerEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg3 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.EventSystems.PointerEventData>), func) as System.Action<UnityEngine.EventSystems.PointerEventData>;
			}

			System.Action<UnityEngine.EventSystems.PointerEventData> arg4 = null;
			LuaTypes funcType5 = LuaDLL.lua_type(L, 5);

			if (funcType5 != LuaTypes.LUA_TFUNCTION)
			{
				 arg4 = (System.Action<UnityEngine.EventSystems.PointerEventData>)ToLua.CheckObject(L, 5, typeof(System.Action<UnityEngine.EventSystems.PointerEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 5);
				arg4 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.EventSystems.PointerEventData>), func) as System.Action<UnityEngine.EventSystems.PointerEventData>;
			}

			System.Action<UnityEngine.EventSystems.PointerEventData> arg5 = null;
			LuaTypes funcType6 = LuaDLL.lua_type(L, 6);

			if (funcType6 != LuaTypes.LUA_TFUNCTION)
			{
				 arg5 = (System.Action<UnityEngine.EventSystems.PointerEventData>)ToLua.CheckObject(L, 6, typeof(System.Action<UnityEngine.EventSystems.PointerEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 6);
				arg5 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.EventSystems.PointerEventData>), func) as System.Action<UnityEngine.EventSystems.PointerEventData>;
			}

			System.Action<UI.StateHandle,int> arg6 = null;
			LuaTypes funcType7 = LuaDLL.lua_type(L, 7);

			if (funcType7 != LuaTypes.LUA_TFUNCTION)
			{
				 arg6 = (System.Action<UI.StateHandle,int>)ToLua.CheckObject(L, 7, typeof(System.Action<UI.StateHandle,int>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 7);
				arg6 = DelegateFactory.CreateDelegate(typeof(System.Action<UI.StateHandle,int>), func) as System.Action<UI.StateHandle,int>;
			}

			UI.StateHandle.AddGlobalHook(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveGlobalHook(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			System.Action<UI.StateHandle> arg0 = null;
			LuaTypes funcType1 = LuaDLL.lua_type(L, 1);

			if (funcType1 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UI.StateHandle>)ToLua.CheckObject(L, 1, typeof(System.Action<UI.StateHandle>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 1);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UI.StateHandle>), func) as System.Action<UI.StateHandle>;
			}

			System.Action<UI.StateHandle> arg1 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<UI.StateHandle>)ToLua.CheckObject(L, 2, typeof(System.Action<UI.StateHandle>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<UI.StateHandle>), func) as System.Action<UI.StateHandle>;
			}

			System.Action<UnityEngine.EventSystems.PointerEventData> arg2 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (System.Action<UnityEngine.EventSystems.PointerEventData>)ToLua.CheckObject(L, 3, typeof(System.Action<UnityEngine.EventSystems.PointerEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg2 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.EventSystems.PointerEventData>), func) as System.Action<UnityEngine.EventSystems.PointerEventData>;
			}

			System.Action<UnityEngine.EventSystems.PointerEventData> arg3 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg3 = (System.Action<UnityEngine.EventSystems.PointerEventData>)ToLua.CheckObject(L, 4, typeof(System.Action<UnityEngine.EventSystems.PointerEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg3 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.EventSystems.PointerEventData>), func) as System.Action<UnityEngine.EventSystems.PointerEventData>;
			}

			System.Action<UnityEngine.EventSystems.PointerEventData> arg4 = null;
			LuaTypes funcType5 = LuaDLL.lua_type(L, 5);

			if (funcType5 != LuaTypes.LUA_TFUNCTION)
			{
				 arg4 = (System.Action<UnityEngine.EventSystems.PointerEventData>)ToLua.CheckObject(L, 5, typeof(System.Action<UnityEngine.EventSystems.PointerEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 5);
				arg4 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.EventSystems.PointerEventData>), func) as System.Action<UnityEngine.EventSystems.PointerEventData>;
			}

			System.Action<UnityEngine.EventSystems.PointerEventData> arg5 = null;
			LuaTypes funcType6 = LuaDLL.lua_type(L, 6);

			if (funcType6 != LuaTypes.LUA_TFUNCTION)
			{
				 arg5 = (System.Action<UnityEngine.EventSystems.PointerEventData>)ToLua.CheckObject(L, 6, typeof(System.Action<UnityEngine.EventSystems.PointerEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 6);
				arg5 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.EventSystems.PointerEventData>), func) as System.Action<UnityEngine.EventSystems.PointerEventData>;
			}

			System.Action<UI.StateHandle,int> arg6 = null;
			LuaTypes funcType7 = LuaDLL.lua_type(L, 7);

			if (funcType7 != LuaTypes.LUA_TFUNCTION)
			{
				 arg6 = (System.Action<UI.StateHandle,int>)ToLua.CheckObject(L, 7, typeof(System.Action<UI.StateHandle,int>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 7);
				arg6 = DelegateFactory.CreateDelegate(typeof(System.Action<UI.StateHandle,int>), func) as System.Action<UI.StateHandle,int>;
			}

			UI.StateHandle.RemoveGlobalHook(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddClick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			System.Action arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action)ToLua.CheckObject(L, 2, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			obj.AddClick(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddLuaClick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			System.Action<LuaInterface.LuaTable> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<LuaInterface.LuaTable>)ToLua.CheckObject(L, 2, typeof(System.Action<LuaInterface.LuaTable>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<LuaInterface.LuaTable>), func) as System.Action<LuaInterface.LuaTable>;
			}

			LuaTable arg1 = ToLua.CheckLuaTable(L, 3);
			obj.AddLuaClick(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddClickEx(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			System.Action<UI.StateHandle> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UI.StateHandle>)ToLua.CheckObject(L, 2, typeof(System.Action<UI.StateHandle>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UI.StateHandle>), func) as System.Action<UI.StateHandle>;
			}

			obj.AddClickEx(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddLuaClickEx(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			System.Action<LuaInterface.LuaTable,UI.StateHandle> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<LuaInterface.LuaTable,UI.StateHandle>)ToLua.CheckObject(L, 2, typeof(System.Action<LuaInterface.LuaTable,UI.StateHandle>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<LuaInterface.LuaTable,UI.StateHandle>), func) as System.Action<LuaInterface.LuaTable,UI.StateHandle>;
			}

			LuaTable arg1 = ToLua.CheckLuaTable(L, 3);
			obj.AddLuaClickEx(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddPressHold(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			System.Action<UI.StateHandle> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UI.StateHandle>)ToLua.CheckObject(L, 2, typeof(System.Action<UI.StateHandle>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UI.StateHandle>), func) as System.Action<UI.StateHandle>;
			}

			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.AddPressHold(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddChangeState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			System.Action<UI.StateHandle,int> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UI.StateHandle,int>)ToLua.CheckObject(L, 2, typeof(System.Action<UI.StateHandle,int>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UI.StateHandle,int>), func) as System.Action<UI.StateHandle,int>;
			}

			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.AddChangeState(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddPointUp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			System.Action<UnityEngine.EventSystems.PointerEventData> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.EventSystems.PointerEventData>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.EventSystems.PointerEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.EventSystems.PointerEventData>), func) as System.Action<UnityEngine.EventSystems.PointerEventData>;
			}

			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.AddPointUp(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddPointDown(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			System.Action<UnityEngine.EventSystems.PointerEventData> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.EventSystems.PointerEventData>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.EventSystems.PointerEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.EventSystems.PointerEventData>), func) as System.Action<UnityEngine.EventSystems.PointerEventData>;
			}

			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.AddPointDown(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddDragBegin(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			System.Action<UnityEngine.EventSystems.PointerEventData> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.EventSystems.PointerEventData>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.EventSystems.PointerEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.EventSystems.PointerEventData>), func) as System.Action<UnityEngine.EventSystems.PointerEventData>;
			}

			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.AddDragBegin(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddDrag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			System.Action<UnityEngine.EventSystems.PointerEventData> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.EventSystems.PointerEventData>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.EventSystems.PointerEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.EventSystems.PointerEventData>), func) as System.Action<UnityEngine.EventSystems.PointerEventData>;
			}

			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.AddDrag(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddDragEnd(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			System.Action<UnityEngine.EventSystems.PointerEventData> arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (System.Action<UnityEngine.EventSystems.PointerEventData>)ToLua.CheckObject(L, 2, typeof(System.Action<UnityEngine.EventSystems.PointerEventData>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(System.Action<UnityEngine.EventSystems.PointerEventData>), func) as System.Action<UnityEngine.EventSystems.PointerEventData>;
			}

			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.AddDragEnd(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerClick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnPointerClick(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerDown(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnPointerDown(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPointerUp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			UnityEngine.EventSystems.PointerEventData arg0 = (UnityEngine.EventSystems.PointerEventData)ToLua.CheckObject(L, 2, typeof(UnityEngine.EventSystems.PointerEventData));
			obj.OnPointerUp(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ExecuteClick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			obj.ExecuteClick();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ExecuteDown(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(UI.StateHandle)))
			{
				UI.StateHandle obj = (UI.StateHandle)ToLua.ToObject(L, 1);
				obj.ExecuteDown();
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UI.StateHandle), typeof(UnityEngine.Vector2)))
			{
				UI.StateHandle obj = (UI.StateHandle)ToLua.ToObject(L, 1);
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
				obj.ExecuteDown(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UI.StateHandle.ExecuteDown");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ExecuteUp(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(UI.StateHandle)))
			{
				UI.StateHandle obj = (UI.StateHandle)ToLua.ToObject(L, 1);
				obj.ExecuteUp();
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UI.StateHandle), typeof(UnityEngine.Vector2)))
			{
				UI.StateHandle obj = (UI.StateHandle)ToLua.ToObject(L, 1);
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
				obj.ExecuteUp(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UI.StateHandle.ExecuteUp");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ExecuteHold(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			obj.ExecuteHold();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ExecuteBeginDrag(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(UI.StateHandle)))
			{
				UI.StateHandle obj = (UI.StateHandle)ToLua.ToObject(L, 1);
				obj.ExecuteBeginDrag();
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UI.StateHandle), typeof(UnityEngine.Vector2)))
			{
				UI.StateHandle obj = (UI.StateHandle)ToLua.ToObject(L, 1);
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
				obj.ExecuteBeginDrag(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UI.StateHandle.ExecuteBeginDrag");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ExecuteDrag(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(UI.StateHandle)))
			{
				UI.StateHandle obj = (UI.StateHandle)ToLua.ToObject(L, 1);
				obj.ExecuteDrag();
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UI.StateHandle), typeof(UnityEngine.Vector2)))
			{
				UI.StateHandle obj = (UI.StateHandle)ToLua.ToObject(L, 1);
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
				obj.ExecuteDrag(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UI.StateHandle.ExecuteDrag");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ExecuteEndDrag(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(UI.StateHandle)))
			{
				UI.StateHandle obj = (UI.StateHandle)ToLua.ToObject(L, 1);
				obj.ExecuteEndDrag();
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UI.StateHandle), typeof(UnityEngine.Vector2)))
			{
				UI.StateHandle obj = (UI.StateHandle)ToLua.ToObject(L, 1);
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
				obj.ExecuteEndDrag(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UI.StateHandle.ExecuteEndDrag");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UI.StateHandle obj = (UI.StateHandle)ToLua.CheckObject(L, 1, typeof(UI.StateHandle));
			obj.Clear();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_states(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UI.StateHandle obj = (UI.StateHandle)o;
			System.Collections.Generic.List<UI.StateHandle.State> ret = obj.m_states;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_states on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_curState(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UI.StateHandle obj = (UI.StateHandle)o;
			int ret = obj.m_curState;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_curState on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_pressHoldTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UI.StateHandle obj = (UI.StateHandle)o;
			float ret = obj.m_pressHoldTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_pressHoldTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_ctrlType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UI.StateHandle obj = (UI.StateHandle)o;
			UI.StateHandle.CtrlType ret = obj.m_ctrlType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_ctrlType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Duration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UI.StateHandle obj = (UI.StateHandle)o;
			float ret = obj.Duration;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Duration on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsRealTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UI.StateHandle obj = (UI.StateHandle)o;
			bool ret = obj.IsRealTime;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsRealTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurState(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UI.StateHandle obj = (UI.StateHandle)o;
			UI.StateHandle.State ret = obj.CurState;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CurState on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurStateIdx(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UI.StateHandle obj = (UI.StateHandle)o;
			int ret = obj.CurStateIdx;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index CurStateIdx on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StateName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UI.StateHandle obj = (UI.StateHandle)o;
			string[] ret = obj.StateName;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index StateName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EnableCtrlState(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UI.StateHandle obj = (UI.StateHandle)o;
			bool ret = obj.EnableCtrlState;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index EnableCtrlState on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_states(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UI.StateHandle obj = (UI.StateHandle)o;
			System.Collections.Generic.List<UI.StateHandle.State> arg0 = (System.Collections.Generic.List<UI.StateHandle.State>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UI.StateHandle.State>));
			obj.m_states = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_states on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_curState(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UI.StateHandle obj = (UI.StateHandle)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.m_curState = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_curState on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_pressHoldTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UI.StateHandle obj = (UI.StateHandle)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.m_pressHoldTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_pressHoldTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_ctrlType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UI.StateHandle obj = (UI.StateHandle)o;
			UI.StateHandle.CtrlType arg0 = (UI.StateHandle.CtrlType)ToLua.CheckObject(L, 2, typeof(UI.StateHandle.CtrlType));
			obj.m_ctrlType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_ctrlType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Duration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UI.StateHandle obj = (UI.StateHandle)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.Duration = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index Duration on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_IsRealTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UI.StateHandle obj = (UI.StateHandle)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.IsRealTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index IsRealTime on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EnableCtrlState(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UI.StateHandle obj = (UI.StateHandle)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.EnableCtrlState = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index EnableCtrlState on a nil value" : e.Message);
		}
	}
}

